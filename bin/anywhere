#!/usr/bin/env node

var os = require('os');
var fs = require('fs');
var path = require('path');
var http = require('http');
var https = require('https');
const { URL, parse } = require('url');

var send = require('send');
var chokidar = require('chokidar');
var es = require("event-stream");
var WebSocket = require('faye-websocket');

var connect = require('connect');
var serveStatic = require('serve-static');
var serveIndex = require('serve-index');
var fallback = require('connect-history-api-fallback');
var proxy = require('http-proxy-middleware');


var debug = require('debug');
debug.enable('anywhere');

var exec = require('child_process').exec;
var spawn = require('child_process').spawn;
var argv = require("minimist")(process.argv.slice(2), {
  alias: {
    'silent': 's',
    'port': 'p',
    'hostname': 'h',
    'dir': 'd',
    'proxy': 'x',
    'log': 'l',
    'fallback': 'f',
    'open': 'o'
  },
  string: ['port', 'hostname', 'fallback'],
  boolean: ['silent', 'log'],
  'default': {
    'port': 8000,
    'dir': process.cwd()
  }
});

if (argv.help) {
  console.log("Usage:");
  console.log("  anywhere --help // print help information");
  console.log("  anywhere // 8000 as default port, current folder as root");
  console.log("  anywhere 8888 // 8888 as port");
  console.log("  anywhere -p 8989 // 8989 as port");
  console.log("  anywhere -s // don't open browser");
  console.log("  anywhere -h localhost // localhost as hostname");
  console.log("  anywhere -d /home // /home as root");
  console.log("  anywhere -l // print log");
  console.log("  anywhere -f // Enable history fallback");
  console.log("  anywhere --proxy http://localhost:7000/api // Support shorthand URL, webpack.config.js or customize config file");
  console.log("  anywhere --watch  // watch file changes");
  console.log("  anywhere -o index.html  // open file after server started");
  process.exit(0);
}

var openURL = function (url) {
  switch (process.platform) {
    case "darwin":
      exec('open ' + url);
      break;
    case "win32":
      exec('start ' + url);
      break;
    default:
      spawn('xdg-open', [url]);
    // I use `spawn` since `exec` fails on my machine (Linux i386).
    // I heard that `exec` has memory limitation of buffer size of 512k.
    // http://stackoverflow.com/a/16099450/222893
    // But I am not sure if this memory limit causes the failure of `exec`.
    // `xdg-open` is specified in freedesktop standard, so it should work on
    // Linux, *BSD, solaris, etc.
  }
};

/**
 * Get ip(v4) address
 * @return {String} the ipv4 address or 'localhost'
 */
var getIPAddress = function () {
  var ifaces = os.networkInterfaces();
  var ip = '';
  for (var dev in ifaces) {
    ifaces[dev].forEach(function (details) {
      if (ip === '' && details.family === 'IPv4' && !details.internal) {
        ip = details.address;
        return;
      }
    });
  }
  return ip || "127.0.0.1";
};

var log = debug('anywhere');

var app = connect();
app.use(function (req, res, next) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  if (argv.log) {
    log(req.method + ' ' + req.url);
  }
  next();
});
if (argv.fallback !== undefined) {
  console.log('Enable html5 history mode.');
  app.use(fallback({
    index: argv.fallback || '/index.html'
  }));
}
var staticServer = function (root) {
  var INJECTED_CODE = fs.readFileSync(path.join(__dirname, "injected.html"), "utf8");
	var isFile = false;
	try { // For supporting mounting files instead of just directories
		isFile = fs.statSync(root).isFile();
	} catch (e) {
		if (e.code !== "ENOENT") throw e;
	}
	return function(req, res, next) {
		if (req.method !== "GET" && req.method !== "HEAD") return next();
		var reqpath = isFile ? "" : parse(req.url).pathname;
		var hasNoOrigin = !req.headers.origin;
		var injectCandidates = [ new RegExp("</body>", "i"), new RegExp("</svg>"), new RegExp("</head>", "i")];
		var injectTag = null;

		function directory() {
			var pathname = parse(req.originalUrl).pathname;
			res.statusCode = 301;
			res.setHeader('Location', pathname + '/');
			res.end('Redirecting to ' + escape(pathname) + '/');
		}

		function file(filepath /*, stat*/) {
			var x = path.extname(filepath).toLocaleLowerCase(), match,
          possibleExtensions = [ "", ".html", ".htm", ".xhtml", ".php", ".svg" ];
			if (hasNoOrigin && (possibleExtensions.indexOf(x) > -1)) {
				// TODO: Sync file read here is not nice, but we need to determine if the html should be injected or not
				var contents = fs.readFileSync(filepath, "utf8");
				for (var i = 0; i < injectCandidates.length; ++i) {
					match = injectCandidates[i].exec(contents);
					if (match) {
						injectTag = match[0];
						break;
					}
				}
				if (injectTag === null) {
					console.warn("Failed to inject refresh script!",
						"Couldn't find any of the tags ", injectCandidates, "from", filepath);
				}
      }
		}

		function error(err) {
			if (err.status === 404) return next();
			next(err);
		}

		function inject(stream) {
			if (injectTag) {
				// We need to modify the length given to browser
				var len = INJECTED_CODE.length + res.getHeader('Content-Length');
				res.setHeader('Content-Length', len);
				var originalPipe = stream.pipe;
				stream.pipe = function(resp) {
					originalPipe.call(stream, es.replace(new RegExp(injectTag, "i"), INJECTED_CODE + injectTag)).pipe(resp);
				};
			}
    }
		send(req, reqpath, { root: root })
			.on('error', error)
			.on('directory', directory)
			.on('file', file)
			.on('stream', inject)
			.pipe(res);
	};
}
if (argv.watch) {
  app.use(staticServer(argv.dir))
} else {
  app.use(serveStatic(argv.dir, { 'index': ['index.html'] }));
}
app.use(serveIndex(argv.dir, { 'icons': true }));

// anywhere --proxy webpack.config.js
// anywhere --proxy proxy.config.js
// anywhere --proxy http://localhost:7000/api
if (argv.proxy) {
  try {
    // if url
    var url = new URL(argv.proxy);
    app.use(proxy(url.toString(), { changeOrigin: true }));
  } catch (e) {
    // if config file
    var config = require(path.resolve(argv.dir, argv.proxy));
    // support webpack-dev-server proxy options
    try {
      config = config.devServer.proxy;
    } catch (e) {
      if (argv.log) {
        log(e);
      }
    }
    var contexts = Object.keys(config);
    contexts.forEach(context => {
      var options = config[context];
      app.use(proxy(context, options));
    });
  }
}

// anywhere 8888
// anywhere -p 8989
// anywhere 8888 -s // silent
// anywhere -h localhost
// anywhere -d /home
var port = parseInt(argv._[0] || argv.port, 10);
var secure = port + 1;

var hostname = argv.hostname || getIPAddress();

var server = http.createServer(app).listen(port, function () {
  // 忽略80端口
  port = (port != 80 ? ':' + port : '');
  var url = "http://" + hostname + port + '/' + (argv.open || '');
  console.log("Running at " + url);
  if (argv.watch) {
    enableWatch();
  }
  if (!argv.silent) {
    openURL(url);
  }
}).addListener('error', function(e) {
	if (e.code === 'EADDRINUSE') {
    port = (port != 80 ? ':' + port : '');
		var serveURL = "http://" + hostname + port  + '/';
		console.error('%s is already in use. Trying another port.', serveURL);
	} else {
		console.error(e.toString());
		shutdown();
	}
});
var shutdown = function () {
  if (watcher) {
		watcher.close();
  }
  if (server) {
    server.close();
  }
  if (httpsServer) {
    httpsServer.close();
  }
}
var options = {
  key: fs.readFileSync(path.join(__dirname, '../keys', 'key.pem')),
  cert: fs.readFileSync(path.join(__dirname, '../keys', 'cert.pem'))
};

var httpsServer = https.createServer(options, app).listen(secure, function () {
  secure = (secure != 80 ? ':' + secure : '');
  var url = "https://" + hostname + secure + '/' + (argv.open || '');
  console.log("Also running at " + url);
});
var watcher;
// WebSocket
function enableWatch () {
  var clients = [];
  server.addListener('upgrade', function(request, socket, head) {
    var ws = new WebSocket(request, socket, head);
    ws.onopen = function() { ws.send('connected'); };
    var wait = 100;
    if (wait > 0) {
      (function() {
        var wssend = ws.send;
        var waitTimeout;
        ws.send = function() {
          var args = arguments;
          if (waitTimeout) clearTimeout(waitTimeout);
          waitTimeout = setTimeout(function(){
            wssend.apply(ws, args);
          }, wait);
        };
      })();
    }

    ws.onclose = function() {
      clients = clients.filter(function (x) {
        return x !== ws;
      });
    };

    clients.push(ws);
  });

  var ignored = [
    function(testPath) { // Always ignore dotfiles (important e.g. because editor hidden temp files)
      return testPath !== "." && /(^[.#]|(?:__|~)$)/.test(path.basename(testPath));
    }
  ];
  if (argv.ignore) {
    ignored = ignored.concat(argv.ignore);
  }
  if (argv.ignorePattern) {
    ignored.push(argv.ignorePattern);
  }
  // Setup file watcher
  var watchPaths = [argv.dir];
  watcher = chokidar.watch(watchPaths, {
    ignored: ignored,
    ignoreInitial: true
  });
  function handleChange(changePath) {
    var cssChange = path.extname(changePath) === ".css";
    if (cssChange)
      console.log("CSS change detected", changePath);
    else console.log("Change detected", changePath);
    clients.forEach(function (ws) {
      if (ws)
        ws.send(cssChange ? 'refreshcss' : 'reload');
    });
  }
  watcher
    .on("change", handleChange)
    .on("add", handleChange)
    .on("unlink", handleChange)
    .on("addDir", handleChange)
    .on("unlinkDir", handleChange)
    .on("ready", function () {
      console.log("Ready for changes");
    })
    .on("error", function (err) {
      console.log("ERROR:", err);
    });
}